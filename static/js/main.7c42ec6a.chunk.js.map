{"version":3,"sources":["helpers/consts.js","CalculationsForm.js","utilities/grader.js","App.js","serviceWorker.js","index.js"],"names":["temperatures","unitKey","displayName","type","volumes","CalculationsForm","React","useState","finalResult","setFinalResult","initialValues","unitsType","inputQuantity","inputUnitOfMeasure","targetUnitOfMeasure","onSubmit","values","result","inputAmount","inputUnits","targetUnits","studentAnswer","Number","isNaN","parseFloat","authoritativeAnswer","convert","from","to","err","Math","round","grader","props","errors","handleChange","handleSubmit","temperatureOptions","map","temp","key","value","volumeOptions","vol","className","id","data-toggle","name","onChange","checked","icon","faThermometerHalf","faCube","placeholder","defaultValue","disabled","App","href","faExchangeAlt","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c42ec6a.chunk.js","sourcesContent":["export const temperatures = [\n  { unitKey: 'C', displayName: 'Celsius', type: 'temperature' },\n  { unitKey: 'F', displayName: 'Fahrenheit', type: 'temperature' },\n  { unitKey: 'K', displayName: 'Kelvin', type: 'temperature' },\n  { unitKey: 'R', displayName: 'Rankine', type: 'temperature' },\n];\n\nexport const volumes = [\n  { unitKey: 'in3', displayName: 'Cubic inches', type: 'volume' },\n  { unitKey: 'ft3', displayName: 'Cubic feet', type: 'volume' },\n  { unitKey: 'cup', displayName: 'Cups', type: 'volume' },\n  { unitKey: 'gal', displayName: 'Gallons', type: 'volume' },\n  { unitKey: 'l', displayName: 'Liters', type: 'volume' },\n  { unitKey: 'Tbs', displayName: 'Tablespoons', type: 'volume' },\n];\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThermometerHalf, faCube } from '@fortawesome/free-solid-svg-icons';\nimport { temperatures, volumes } from './helpers/consts';\nimport grader from './utilities/grader';\n\nimport { Formik } from 'formik';\n\nconst CalculationsForm = () => {\n  const [finalResult, setFinalResult] = React.useState('');\n  return (\n    <>\n      <Formik\n        initialValues={{\n          unitsType: 'temps',\n          inputQuantity: '',\n          inputUnitOfMeasure: '',\n          targetUnitOfMeasure: '',\n        }}\n        onSubmit={values => {\n          const result = grader(\n            values.inputQuantity,\n            values.inputUnitOfMeasure,\n            values.targetUnitOfMeasure,\n            values.studentAnswer,\n          );\n\n          setFinalResult(result);\n        }}\n      >\n        {props => {\n          const { values, errors, handleChange, handleSubmit } = props;\n\n          const temperatureOptions = temperatures.map(temp => (\n            <option key={temp.unitKey} value={temp.unitKey}>\n              {temp.displayName}\n            </option>\n          ));\n          const volumeOptions = volumes.map(vol => (\n            <option key={vol.unitKey} value={vol.unitKey}>\n              {vol.displayName}\n            </option>\n          ));\n\n          return (\n            <form className=\"form \" id=\"unit-converter-form\" onSubmit={handleSubmit}>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\"></label>\n                <div className=\"form-control-lg col-sm-9 units-type\">\n                  <span className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                    <label\n                      className={`btn btn-secondary btn-lg ${values.unitsType === 'temps' &&\n                        'active'} `}\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"unitsType\"\n                        onChange={handleChange}\n                        checked={values.unitsType === 'temps'}\n                        value=\"temps\"\n                      />\n                      <FontAwesomeIcon icon={faThermometerHalf} /> Temperatures\n                    </label>\n                    <label\n                      className={`btn btn-secondary btn-lg ${values.unitsType === 'vols' &&\n                        'active'} `}\n                    >\n                      <input\n                        type=\"radio\"\n                        name=\"unitsType\"\n                        onChange={handleChange}\n                        checked={values.unitsType === 'vols'}\n                        value=\"vols\"\n                      />\n                      <FontAwesomeIcon icon={faCube} /> Volumes\n                    </label>\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">From:</label>\n                <input\n                  id=\"inputQuantity\"\n                  className=\"form-control form-control-lg col-sm-9\"\n                  type=\"text\"\n                  placeholder=\"Quantity\"\n                  value={values.inputQuantity}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\"></label>\n                <select\n                  id=\"inputUnitOfMeasure\"\n                  className=\"form-control form-control-lg col-sm-9\"\n                  onChange={handleChange}\n                  defaultValue={values.inputUnitOfMeasure}\n                >\n                  <option value=\"\" disabled>\n                    Input unit of measure\n                  </option>\n                  {values.unitsType === 'temps' && temperatureOptions}\n                  {values.unitsType === 'vols' && volumeOptions}\n                </select>\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">To:</label>\n                <select\n                  id=\"targetUnitOfMeasure\"\n                  className=\"form-control form-control-lg col-sm-9\"\n                  onChange={handleChange}\n                  defaultValue={values.targetUnitOfMeasure}\n                >\n                  <option value=\"\" disabled>\n                    Target unit of measure\n                  </option>\n                  {values.unitsType === 'temps' && temperatureOptions}\n                  {values.unitsType === 'vols' && volumeOptions}\n                </select>\n              </div>\n              <div className=\"form-group row\">\n                <label className=\"col-sm-3 col-form-label\">Student Answer:</label>\n                <input\n                  id=\"studentAnswer\"\n                  className=\"form-control form-control-lg col-sm-9\"\n                  type=\"text\"\n                  placeholder=\"Quantity\"\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group row\">\n                <div className=\"col-sm-3 col-form-label\"></div>\n                <button type=\"submit\" className=\"btn btn-primary  btn-lg col-sm-5\">\n                  Grade\n                </button>\n                <div className=\"col-sm-3 col-form-label\">{errors.name && <div>{errors}</div>}</div>\n              </div>\n            </form>\n          );\n        }}\n      </Formik>\n      <div>\n        <h1>{finalResult}</h1>\n      </div>\n    </>\n  );\n};\n\nexport default CalculationsForm;\n","import convert from 'convert-units';\nexport default (inputAmount, inputUnits, targetUnits, studentAnswer) => {\n  if (Number.isNaN(parseFloat(studentAnswer))) {\n    return 'Incorrect';\n  } else if (Number.isNaN(parseFloat(studentAnswer))) {\n    return 'Invalid';\n  }\n  let authoritativeAnswer = '';\n  try {\n    authoritativeAnswer = convert(inputAmount)\n      .from(inputUnits)\n      .to(targetUnits);\n  } catch (err) {\n    return 'Invalid';\n  }\n  const roundedAuthoritativeAnswer = Math.round(10 * authoritativeAnswer) / 10;\n  const roundedStudentAnswer = Math.round(10 * studentAnswer) / 10;\n  const answer = roundedAuthoritativeAnswer === roundedStudentAnswer ? 'Correct' : 'Incorrect';\n  return answer;\n};\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport CalculationsForm from './CalculationsForm';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n          <div className=\"container d-flex justify-content-between\">\n            <a\n              href=\"https://github.com/downtownadambrown/unit-conversion-grader\"\n              className=\"navbar-brand d-flex align-items-center\"\n            >\n              <strong>\n                <FontAwesomeIcon icon={faExchangeAlt} /> &nbsp; Unit Conversion Grader\n              </strong>\n            </a>\n          </div>\n        </div>\n      </header>\n      <main role=\"main\">\n        <section className=\"jumbotron text-center\">\n          <div className=\"container\">\n            <CalculationsForm />\n          </div>\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}