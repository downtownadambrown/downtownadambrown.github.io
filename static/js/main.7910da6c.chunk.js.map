{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","tempItems","convert","possibilities","map","temp","describe","singular","volItems","vol","useState","unitsType","setUnitsType","className","href","icon","faExchangeAlt","role","aria-label","type","onClick","faThermometerHalf","faCube","id","for","placeholder","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAqFeA,MA9Ef,WAIE,IACMC,EADQC,MAAUC,cAAc,eACdC,KAAI,SAAAC,GAAI,OAAI,gCAASH,MAAUI,SAASD,GAAME,aAGhEC,EADON,MAAUC,cAAc,UACfC,KAAI,SAAAK,GAAG,OAAI,gCAASP,MAAUI,SAASG,GAAKF,aARrD,EAUqBG,mBAAS,SAV9B,mBAUNC,EAVM,KAUKC,EAVL,KAWb,OACE,oCACE,gCACE,yBAAKC,UAAU,wCACb,yBAAKA,UAAU,4CACb,uBAAGC,KAAK,IAAID,UAAU,0CACpB,oCAAS,kBAAC,IAAD,CAAiBE,KAAMC,MAAhC,+BAKR,0BAAMC,KAAK,QACT,6BAASJ,UAAU,yBACjB,yBAAKA,UAAU,aACb,2BACE,yBAAKA,UAAU,uBAAuBI,KAAK,QAAQC,aAAW,iBAC5D,4BAAQC,KAAK,SAASN,UAAS,4BAAqC,UAAdF,GAAyB,UAAYS,QAAS,kBAAMR,EAAa,WAAU,kBAAC,IAAD,CAAiBG,KAAMM,MAAxJ,iBACA,4BAAQF,KAAK,SAASN,UAAS,4BAAqC,SAAdF,GAAwB,UAAYS,QAAS,kBAAMR,EAAa,UAAS,kBAAC,IAAD,CAAiBG,KAAMO,MAAtJ,cAIJ,0BAAMT,UAAU,QAAQU,GAAG,uBACzB,yBAAKV,UAAU,kBACb,2BAAOW,IAAI,GAAGX,UAAU,2BAAxB,SACA,2BAAOA,UAAU,wCAAwCM,KAAK,OAAOM,YAAY,cAEnF,yBAAKZ,UAAU,kBACb,2BAAOW,IAAI,GAAGX,UAAU,4BACxB,4BAAQA,UAAU,yCACD,UAAdF,GAAyBV,EACX,SAAdU,GAAwBH,IAO7B,yBAAKK,UAAU,kBACb,2BAAOW,IAAI,GAAGX,UAAU,2BAAxB,OACA,4BAAQA,UAAU,yCACD,UAAdF,GAAyBV,EACX,SAAdU,GAAwBH,IAS7B,yBAAKK,UAAU,kBACb,2BAAOW,IAAI,GAAGX,UAAU,2BAAxB,mBACA,2BAAOA,UAAU,wCAAwCM,KAAK,OAAOM,YAAY,cAEnF,yBAAKZ,UAAU,kBACb,yBAAKW,IAAI,GAAGX,UAAU,4BACtB,4BAAQM,KAAK,SAASO,MAAM,+BAA5B,SACA,yBAAKF,IAAI,GAAGX,UAAU,2BAAtB,kBC/DIc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7910da6c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faThermometerHalf, faCube, faExchangeAlt } from '@fortawesome/free-solid-svg-icons'\nimport  convert from 'convert-units';\n\nfunction App() {\n\n  //const temperatures = [{ id: 1, displayName: \"Kelvin\", abbreviation: '' }]\n\n  const temps = convert().possibilities('temperature');\n  const tempItems = temps.map(temp => <option>{convert().describe(temp).singular}</option>)\n\n  const vols = convert().possibilities('volume');\n  const volItems = vols.map(vol => <option>{convert().describe(vol).singular}</option>)\n\n  const [unitsType, setUnitsType] = useState('temps');\n  return (\n    <>\n      <header>\n        <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n          <div className=\"container d-flex justify-content-between\">\n            <a href=\"#\" className=\"navbar-brand d-flex align-items-center\">\n              <strong> <FontAwesomeIcon icon={faExchangeAlt} /> Unit Conversion Grader</strong>\n            </a>\n          </div>\n        </div>\n      </header>\n      <main role=\"main\">\n        <section className=\"jumbotron text-center\">\n          <div className=\"container\">\n            <p>\n              <div className=\"btn-group units-type\" role=\"group\" aria-label=\"Basic example\">\n                <button type=\"button\" className={`btn btn-secondary ${unitsType === 'temps' && 'active'}`} onClick={() => setUnitsType('temps')}><FontAwesomeIcon icon={faThermometerHalf} /> Temperatures</button>\n                <button type=\"button\" className={`btn btn-secondary ${unitsType === 'vols' && 'active'}`} onClick={() => setUnitsType('vols')}><FontAwesomeIcon icon={faCube} /> Volumes</button>\n              </div>\n            </p>\n\n            <form className=\"form \" id=\"unit-converter-form\">\n              <div className=\"form-group row\">\n                <label for=\"\" className=\"col-sm-3 col-form-label\">From:</label>\n                <input className=\"form-control form-control-lg col-sm-9\" type=\"text\" placeholder=\"Quantity\" />\n              </div>\n              <div className=\"form-group row\">\n                <label for=\"\" className=\"col-sm-3 col-form-label\"></label>\n                <select className=\"form-control form-control-lg col-sm-9\">\n                  {unitsType === 'temps' && tempItems}\n                  {unitsType === 'vols' && volItems}\n                  {/* <option>Kelvin</option>\n                  <option>Celsius</option>\n                  <option>Fahrenheit</option>\n                  <option>Rankine</option> */}\n                </select>\n              </div>\n              <div className=\"form-group row\">\n                <label for=\"\" className=\"col-sm-3 col-form-label\">To:</label>\n                <select className=\"form-control form-control-lg col-sm-9\">\n                  {unitsType === 'temps' && tempItems}\n                  {unitsType === 'vols' && volItems}\n                  {/* <option>Liters</option>\n                  <option>Tablespoon</option>\n                  <option>Cubic inches</option>\n                  <option>Cup</option>\n                  <option>Cubic feet</option>\n                  <option>Gallon</option> */}\n                </select>\n              </div>\n              <div className=\"form-group row\">\n                <label for=\"\" className=\"col-sm-3 col-form-label\">Student Answer:</label>\n                <input className=\"form-control form-control-lg col-sm-9\" type=\"text\" placeholder=\"Quantity\" />\n              </div>\n              <div className=\"form-group row\">\n                <div for=\"\" className=\"col-sm-3 col-form-label\"></div>\n                <button type=\"submit\" class=\"btn btn-primary lg col-sm-5\">Grade</button>\n                <div for=\"\" className=\"col-sm-3 col-form-label\">Correct</div>\n              </div>\n            </form>\n          </div>\n        </section>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}